# --------- Query - (Entry points) ---------
type Query {
  # PhysicalEntity(dbId: Int!): PhysicalEntity
  Reaction(dbId: Int!): Reaction
  Pathway(dbId: Int!): Pathway
  Protein(dbId: Int!): Protein
}

# ---------- Interfaces ----------
# (PhysicalEntity, Event, ReferenceEntity)
interface PhysicalEntity {
  id: ID
  dbId: Int
  displayName: String
  name: [String]
  schemaClass: String
  speciesName: String
  stId: String
  dbTypes: [String]
}

interface Event {
  id: ID
  dbId: Int
  dbTypes: [String]
  schemaClass: String
  oldStId: String
  isInDisease: Boolean
  releaseDate: String
  displayName: String
  stId: String
  speciesName: String
  diagramHeight: Int
  hasEHLD: Boolean
  stIdVersion: String
  releaseStatus: String
  name: [String]
  definition: String
  hasDiagram: Boolean
  isInferred: Boolean
  doi: String
  diagramWidth: Int
  isChimeric: Boolean
  systematicName: String
}

interface ReferenceEntity {
  id: ID
  dbId: Int
  dbTypes: [String]
  abbreviation: String
  approvalSource: [String]
  approved: Boolean
  chain: [String]
  checksum: String
  comment: [String]
  databaseName: String
  description: [String]
  displayName: String
  formula: String
  geneName: [String]
  inn: String
  identifier: String
  isSequenceChanged: Boolean
  keyword: [String]
  name: [String]
  otherIdentifier: [String]
  schemaClass: String
  secondaryIdentifier: [String]
  sequenceLength: Int
  trivial: Boolean
  type: String
  url: String
  variantIdentifier: String

}

# --------- Types by "PhysicalEntity" ---------
# (Complex, Drug, Set, GenomeEncodedEntity, EntityWithAccessionedSequence, OtherEntity, Polymer, SimpleEntity, Protein)
type Complex implements PhysicalEntity {
  id: ID
  dbId: Int
  displayName: String
  name: [String]
  schemaClass: String
  speciesName: String
  stId: String
  dbTypes: [String]
}

type Drug implements PhysicalEntity {
  id: ID
  dbId: Int
  displayName: String
  name: [String]
  schemaClass: String
  speciesName: String
  stId: String
  dbTypes: [String]
}

type Set implements PhysicalEntity {
  id: ID
  dbId: Int
  displayName: String
  name: [String]
  schemaClass: String
  speciesName: String
  stId: String
  dbTypes: [String]
  members: [PhysicalEntity]
  candidates: [PhysicalEntity]
}

type GenomeEncodedEntity implements PhysicalEntity {
  id: ID
  dbId: Int
  displayName: String
  name: [String]
  schemaClass: String
  speciesName: String
  stId: String
  dbTypes: [String]
}

type EntityWithAccessionedSequence implements PhysicalEntity {
  id: ID
  dbId: Int
  displayName: String
  name: [String]
  schemaClass: String
  speciesName: String
  stId: String
  dbTypes: [String]
}

type OtherEntity implements PhysicalEntity {
  id: ID
  dbId: Int
  displayName: String
  name: [String]
  schemaClass: String
  speciesName: String
  stId: String
  dbTypes: [String]
}

type Polymer implements PhysicalEntity {
  id: ID
  dbId: Int
  displayName: String
  name: [String]
  schemaClass: String
  speciesName: String
  stId: String
  dbTypes: [String]
}

type SimpleEntity implements PhysicalEntity {
  id: ID
  dbId: Int
  displayName: String
  name: [String]
  schemaClass: String
  speciesName: String
  stId: String
  dbTypes: [String]
}

type Protein implements PhysicalEntity {
  id: ID
  dbId: Int
  dbTypes: [String]
  definition: String
  displayName: String
  endCoordinate: Int
  geneName: String
  isChimeric: Boolean
  isInDisease: Boolean
  isOrdered: Boolean
  maxUnitCount: Int
  minUnitCount: Int
  name: [String]
  oldStId: String
  referenceType: String
  schemaClass: String
  speciesName: String
  startCoordinate: Int
  stId: String
  stIdVersion: String
  stoichiometryKnown: Boolean
  systematicName: String
  referenceEntity: [ReferenceGeneProduct]
  #@relation(name: "referenceEntity", direction: "OUT")
}

# --------- Types by "Event" ---------
# (Reaction, Pathway)
type Reaction implements Event {
  id: ID
  dbId: Int
  dbTypes: [String]
  schemaClass: String
  oldStId: String
  isInDisease: Boolean
  releaseDate: String
  displayName: String
  stId: String
  speciesName: String
  diagramHeight: Int
  hasEHLD: Boolean
  stIdVersion: String
  releaseStatus: String
  name: [String]
  definition: String
  hasDiagram: Boolean
  isInferred: Boolean
  doi: String
  diagramWidth: Int
  isChimeric: Boolean
  systematicName: String
  templateEvent: [Event]
  reverseReaction: [Reaction]
  input: [PhysicalEntity]
  output: [PhysicalEntity]

  #@relation(name: "input", direction: "OUT")
  #@relation(name: "reverseReaction", direction: "BOTH")
  #@relation(name: "templateEvent", direction: "OUT")
  #@relation(name: "output", direction: "OUT")
  #@neo4j_ignore #@relation(name: "input", direction: "OUT")
  #@neo4j_ignore
  #@cypher(statement: "MATCH (this)-[:input]->(p:PhysicalEntity) RETURN p") # @relation(name: "input", direction: "OUT")
}

type Pathway implements Event {
  id: ID
  dbId: Int
  dbTypes: [String]
  schemaClass: String
  oldStId: String
  isInDisease: Boolean
  releaseDate: String
  displayName: String
  stId: String
  speciesName: String
  diagramHeight: Int
  hasEHLD: Boolean
  stIdVersion: String
  releaseStatus: String
  name: [String]
  definition: String
  hasDiagram: Boolean
  isInferred: Boolean
  doi: String
  diagramWidth: Int
  isChimeric: Boolean
  systematicName: String
  hasEvent: [Event]
  #@relation(name: "hasEvent", direction: "OUT")
}

# ----- Types By "ReferenceEntity" -----
# (ReferenceGeneProduct, ReferenceMolecule)
type ReferenceGeneProduct implements ReferenceEntity {
  id: ID
  dbId: Int
  dbTypes: [String]
  abbreviation: String
  accessUrl: String
  approvalSource: [String]
  approved: Boolean
  chain: [String]
  checksum: String
  comment: [String]
  databaseName: String
  description: [String]
  displayName: String
  formula: String
  geneName: [String]
  inn: String
  identifier: String
  isSequenceChanged: Boolean
  keyword: [String]
  name: [String]
  otherIdentifier: [String]
  schemaClass: String
  secondaryIdentifier: [String]
  sequenceLength: Int
  trivial: Boolean
  type: String
  url: String
  variantIdentifier: String
  referenceDatabase: [ReferenceDatabase]
  #@relation(name: "referenceDatabase", direction: "OUT")
}

type ReferenceMolecule implements ReferenceEntity {
  id: ID
  dbId: Int
  dbTypes: [String]
  abbreviation: String
  approvalSource: [String]
  approved: Boolean
  chain: [String]
  checksum: String
  comment: [String]
  databaseName: String
  description: [String]
  displayName: String
  formula: String
  geneName: [String]
  inn: String
  identifier: String
  isSequenceChanged: Boolean
  keyword: [String]
  name: [String]
  otherIdentifier: [String]
  schemaClass: String
  secondaryIdentifier: [String]
  sequenceLength: Int
  trivial: Boolean
  type: String
  url: String
  variantIdentifier: String
}

# ----- Just Types -----
type ReferenceDatabase implements ReferenceEntity {
  id: ID
  dbId: Int
  dbTypes: [String]
  accessUrl: String
  displayName: String
  name: [String]
  schemaClass: String

  abbreviation: String
  approvalSource: [String]
  approved: Boolean
  chain: [String]
  checksum: String
  comment: [String]
  databaseName: String
  description: [String]
  formula: String
  geneName: [String]
  inn: String
  identifier: String
  isSequenceChanged: Boolean
  keyword: [String]
  otherIdentifier: [String]
  secondaryIdentifier: [String]
  sequenceLength: Int
  trivial: Boolean
  type: String
  url: String
  variantIdentifier: String
}
